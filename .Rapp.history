getwd()
dir
dir()
version()
version
vector()
v <- vector(4)
v <- vector()
v
vector
v <- vector(length=4)
v
i = 2L
i
i <- 2
i
i = null
i =
nil
i = []
i
i = 3
i
j = 4
j
j = 4.40004
j
i.class()
class(i)
attributes(i)
lenght(i)
length(i)
attributes(i)
msg = "foo"
msg
print (msg)
x =
;
##huh
msg ## comment
x = 5
x
clear
clear()
x <- 1:20
x
x = (0.5,0.6)
x = c(0.5,0.6)
x
x = c(T,F)
x
x = c("hellow", "world")
x
x 2:9
x <- 2:9
ls
x
y = c(1.7,"a")
y
x <- 0.6
class (x)
as.nueric(x)
as.numeric(x)
x <- 0:6
x
class (x)
as.numeric(x)
as.logical(x)
as.character(x)
m = matrix(2,3)
m
m = matrix(NA,2,3)
m
dim(m)
attributes(m)
m = matrix(1:6,2,3)
m
m = matrix(1:6,3,3)
m
m = matrix(1:9,3,3)
m
m = 1:10
dim(m) = c(2,5)
m
cls()
x = 1:3
y <- 10:12
cbind(x,y)
r = rbind(x,y)
r
x = list(1,"a",T,1 + 4i)
x
x = list(1:4,"a",T,1 + 4i)
x
x = list(y,"a",T,1 + 4i)
x
x = list(r,"a",T,1 + 4i)
x
x  = factor(c("yes","yes","no","yes","no"))
x
table(x)
class(x)
unclass(x)
x
unclass(x)
x <- natrix(1:6,2,3)
x <- matrix(1:6,2,3)
x
x[1,]
x[,2]
x <- lsit(foo=1:4, bar=0.6)
x <- list(foo=1:4, bar=0.6)
x
x$bar
x[2]
x[[2]]
x$foo
x["foo"]
x["fo"]
x$fo
x$f
x$g
x$b
x <- list(foo=1:4, bar=0.6, baz="hello")
x
x[c(1,3)]
x[c(1,3)]["bax"]
x[c(1,3)]["baz"]
name <- "foo"
x[name]
x[[name]]
name <- "gak"
x[[name]]
x <- c(1,2,NA,4,NA, 5)
bad <- is.na(x)
bad
x[bad]
x[!bad]
x <- 1:4
y <- 2
x + y
x
y
x <- c(3, 5, 1, 10, 12, 6)
x[x <= 5] <- 0
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x[2]
rnorm
sd
x = rnorm(100)
sd (x)
xube = function(x,n)
{}
xube = function(x,n)
{}
xube = function(x,n) {}
xube = function(x,n) {x^3}
xube(3)
x = 1:10
if (x > 5)  {x <- 0}
f = function(x) {g = function(y) {y+z} z= 4}
?cor
BOD
BOD[with(BOD,order(demand)),]
BOD[with(BOD,order(time)),]
BOD[with(BOD,order(Time)),]
library(ggplot2)
library(dplyr,warn.conflicts = F)#
library(tidyr)#
library(lubridate)#
library(ggplot2)
# main logic is in the main() function at the end of file#
## support functions#
# plot on screen#
plotOnScreen <- function(plotFunction,...) {#
    p = plotFunction(...)#
    print(p)#
    return(p)#
}#
#
# plot on screen#
justPlot <- function(plotFunction,...) {#
    plotFunction(...)#
}#
#
## loading and processing functions#
# load the full data source into a 'tmp' if not there already,#
#  and once it's there, if not test, use full data, else just use sample of the full data.#
# Note also storing into globals so that this method can easily be called repetitively.#
loadCsvData <- function(zipFile,dataFile,test,testSampleSize) {#
    unzip(zipFile)#
    if (!exists("FullDataFromSource")) {#
        FullDataFromSource <<- read.csv(dataFile)#
    }#
    # for expolatory phase just test with small data set in case full data set is large#
    if (!test) {#
        WorkingDataFromSource <<- FullDataFromSource#
    } else {#
        # try to keep the same sample set#
        if (!exists("WorkingDataFromSource_sample")) {#
            WorkingDataFromSource_sample <<- FullDataFromSource %>% sample_n(testSampleSize)#
            WorkingDataFromSource <<- WorkingDataFromSource_sample#
        }#
    }#
}#
#
# build the data set for steps by day with NA#
buildDataPerDay <- function(dataFromSource) {#
    d = dataFromSource %>%#
        mutate(datePosix=ymd(date)) %>%#
        arrange(datePosix) %>%#
        group_by(datePosix) %>%#
        summarise(stepsTotal = as.integer(sum(steps,na.rm=TRUE)))#
    return(d)#
}#
#
# build the data set for steps by interval with NA#
buildDataPerInterval <- function(dataFromSource) {#
    d = dataFromSource %>%#
        mutate(datePosix = ymd(date)) %>%#
        arrange(interval) %>%#
        group_by(interval) %>%#
        summarise(meanIntervalSteps = as.integer(mean(steps, na.rm=T)))#
    return(d)#
}#
#
# convert with NA replace#
convertStepsToNoNAData <- function(dataFromSource,intervalData) {#
    d = dataFromSource %>%#
        mutate(steps = ifelse(is.na(steps), intervalData$meanIntervalSteps, steps))#
    return(d)#
}#
# append weekend or weekday factor#
appendWeekdayWeekendData <- function(dataFromSource) {#
    d = dataFromSource %>%#
        mutate(weekend = ifelse(wday(date) == 1 | wday(date) == 7,"weekend","weekday"))#
    return(d)#
}#
#
# build the data set for steps by interval#
buildDataPerIntervalWeekend <- function(dataFromSource) {#
    d = dataFromSource %>%#
        mutate(datePosix = ymd(date)) %>%#
        arrange(interval,weekend) %>%#
        group_by(interval,weekend) %>%#
        summarise(meanIntervalSteps = mean(steps, na.rm=T))#
#
    return(d)#
}#
#
## analysis plot functions#
# plot histogtram of mean total number of steps per day#
plotHistMeanStepsPerDay <- function(d, addToTitle = "", numBreaks=10) {#
    mn = as.integer(mean(d$stepsTotal, na.rm=TRUE))#
    md = as.integer(median(d$stepsTotal, na.rm=TRUE))#
    meanText = paste0("Mean = ", mn)#
    medianText = paste0("Median = ", md)#
    mainText = paste0("Histogram ",addToTitle)#
    xmin = min(d$stepsTotal)#
    xmax = max(d$stepsTotal)#
    xdist = c(xmin,xmax)#
    stepsCol = "#00FF0066"#
#
    hist(d$stepsTotal, xlim=xdist, xlab="Steps Per Day", main=mainText, col=stepsCol, ylim=c(0,20), breaks=numBreaks)#
    legend("topright", legend=c(meanText,medianText), fill=c("red","blue"), box.lwd = 0, box.col = "red")#
    abline(v=c(mn,md),col=c("red","blue"))#
}#
#
# plot time series of average daily activity pattern#
plotTimeSeriesMeanStepsPerDay <- function(d) {#
    # calc and report max#
    mx = max(d$meanIntervalSteps, na.rm = TRUE)#
    tmp = d$interval[d$meanIntervalSteps == mx]#
    mxInterval = tmp[!is.na(tmp)]#
    maxText = paste0("Max = ", as.integer(mx), " at interval = ", mxInterval)#
    textMaxX = d$interval[1]#
    textMaxY = mx - (mx * .05)#
    p = ggplot(d, aes(x=interval, y=meanIntervalSteps)) +#
        geom_line() +#
        geom_abline(slope = 0, intercept = mx, color = "blue") +#
        labs(list(x ="Interval",y ="Mean of Steps", title="Total Steps Per Interval (NA's not replaced)")) +#
        annotate("text", label = maxText, x = textMaxX, y = textMaxY, size = 4, colour = "blue", adj = 0)#
    return (p)#
}#
#
# plot time series of activity patterns between weekdays and weekends#
plotTimeSeriesWeekend <- function(d) {#
    p = ggplot(d, aes(x=interval, y=meanIntervalSteps)) +#
        geom_line() +#
        facet_wrap(~weekend,ncol=1) +#
        labs(list(x ="Interval",y ="Mean of Steps", title="Total Steps Per Interval Weekday vs Weekend"))#
    return (p)#
}#
#
## main#
main <- function() {#
    # when testing data may not represent full set of data.#
    # set test to TRUE when exploring data#
    zipFile = "./activity.zip"#
    if (file.exists(zipFile)) {#
        # load data as globals#
        loadCsvData(zipFile,dataFile="./activity.csv",test=FALSE,testSampleSize=1000)#
        # build analyis data for mean steps per day and plot#
        stepsPerDayData <<- buildDataPerDay(WorkingDataFromSource)#
        numBrks = 16#
        addToTitleText = paste0("With NA's")#
        justPlot(plotHistMeanStepsPerDay, stepsPerDayData, addToTitle=addToTitleText, numBreaks=numBrks)#
        # build analysis data for mean steps per interval and plot#
        stepsPerIntervalData <<- buildDataPerInterval(WorkingDataFromSource)#
        p = plotOnScreen(plotTimeSeriesMeanStepsPerDay, stepsPerIntervalData)#
        # build analyis data for imputed missing value and plot#
        noNAData <<- convertStepsToNoNAData(WorkingDataFromSource,stepsPerIntervalData)#
        stepsPerDayNoNAData <<- buildDataPerDay(noNAData)#
        addToTitleText = paste0("With ",sum(is.na(WorkingDataFromSource$steps))," NA's replaced with mean")#
        p = justPlot(plotHistMeanStepsPerDay, stepsPerDayNoNAData, addToTitle=addToTitleText, numBreaks=numBrks)#
#
        # build analyis data for weekend vs weekday and plot#
        weekdayWeekendData <<- appendWeekdayWeekendData(noNAData)#
        weekdayWeekendStepsPerIntervalData <<- buildDataPerIntervalWeekend(weekdayWeekendData)#
        p = plotOnScreen(plotTimeSeriesWeekend, weekdayWeekendStepsPerIntervalData)#
    } else {#
        warning (paste("The data file",zipFile,"doesn't exist, make sure to set the working directory!"))#
    }#
}#
#
### run main#
main()#
# knit2html("PA1_template.Rmd")
setwd()
getws()
getwd()
sestwd("/Users/mvonderlieth/Playground/Programming/Projects/DataScience/ReproducibleResearch-5/RepData_PeerAssessment1")
setwd("/Users/mvonderlieth/Playground/Programming/Projects/DataScience/ReproducibleResearch-5/RepData_PeerAssessment1")
main()
main()
